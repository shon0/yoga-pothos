"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: ()=>FieldRef
});
const _types = require("../types");
function _defineProperty(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
let _outputFieldShapeKey = _types.outputFieldShapeKey;
class FieldRef {
    toString() {
        if (this.fieldName) {
            return `${this.parentTypename}.${this.fieldName}`;
        }
        return this.parentTypename;
    }
    constructor(kind, parentTypename){
        _defineProperty(this, "kind", void 0);
        _defineProperty(this, "parentTypename", void 0);
        _defineProperty(this, "fieldName", void 0);
        _defineProperty(this, _outputFieldShapeKey, void 0);
        this.kind = kind;
        this.parentTypename = parentTypename;
    }
}

//# sourceMappingURL=field.js.map
/* eslint-disable max-classes-per-file */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: ()=>InterfaceRef,
    ImplementableInterfaceRef: ()=>ImplementableInterfaceRef
});
const _types = require("../types");
const _base = /*#__PURE__*/ _interopRequireDefault(require("./base"));
function _defineProperty(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
let _outputShapeKey = _types.outputShapeKey, _parentShapeKey = _types.parentShapeKey;
class InterfaceRef extends _base.default {
    constructor(name){
        super('Interface', name);
        _defineProperty(this, "kind", 'Interface');
        _defineProperty(this, _outputShapeKey, void 0);
        _defineProperty(this, _parentShapeKey, void 0);
    }
}
class ImplementableInterfaceRef extends InterfaceRef {
    implement(options) {
        return this.builder.interfaceType(this, options);
    }
    constructor(builder, name){
        super(name);
        _defineProperty(this, "builder", void 0);
        this.builder = builder;
    }
}

//# sourceMappingURL=interface.js.map
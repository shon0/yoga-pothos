"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const ava_1 = __importDefault(require("ava"));
const ts = __importStar(require("typescript"));
const read_default_tsconfig_1 = require("../read-default-tsconfig");
(0, ava_1.default)('default values', (t) => {
    const options = {};
    const filename = 'some-file.tsx';
    const swcConfig = (0, read_default_tsconfig_1.tsCompilerOptionsToSwcConfig)(options, filename);
    const expected = {
        module: 'es6',
        sourcemap: false,
        experimentalDecorators: false,
        emitDecoratorMetadata: false,
        esModuleInterop: false,
        swc: {
            filename,
            inputSourceMap: undefined,
            sourceRoot: undefined,
            jsc: {
                externalHelpers: false,
                parser: {
                    syntax: 'typescript',
                    tsx: true,
                    dynamicImport: true,
                    decorators: undefined,
                },
                paths: {},
                keepClassNames: true,
                target: 'es2018',
                transform: {
                    decoratorMetadata: undefined,
                    legacyDecorator: undefined,
                    react: undefined,
                },
            },
        },
    };
    t.deepEqual(swcConfig, expected);
});
(0, ava_1.default)('should set the decorator config', (t) => {
    const options = {
        experimentalDecorators: true,
        emitDecoratorMetadata: true,
    };
    const filename = 'some-file.ts';
    const swcConfig = (0, read_default_tsconfig_1.tsCompilerOptionsToSwcConfig)(options, filename);
    const expected = {
        experimentalDecorators: true,
        emitDecoratorMetadata: true,
        swc: {
            filename,
            jsc: {
                parser: {
                    decorators: true,
                },
                transform: {
                    decoratorMetadata: true,
                    legacyDecorator: true,
                },
            },
        },
    };
    t.like(swcConfig, expected);
});
(0, ava_1.default)('should force the jsx  config', (t) => {
    const options = {
        jsx: ts.JsxEmit.ReactJSX,
    };
    const filename = 'some-file.ts';
    const swcConfig = (0, read_default_tsconfig_1.tsCompilerOptionsToSwcConfig)(options, filename);
    const expected = {
        module: 'es6',
        swc: {
            filename,
            jsc: {
                parser: {
                    tsx: true,
                },
                transform: {
                    react: {
                        pragma: options.jsxFactory,
                        pragmaFrag: options.jsxFragmentFactory,
                        importSource: 'react',
                        runtime: 'automatic',
                        useBuiltins: true,
                    },
                },
            },
        },
    };
    t.like(swcConfig, expected);
});
(0, ava_1.default)('should set all values', (t) => {
    const options = {
        module: ts.ModuleKind.CommonJS,
        target: ts.ScriptTarget.ES5,
        sourceMap: true,
        esModuleInterop: true,
        inlineSourceMap: true,
        sourceRoot: 'source-root',
        importHelpers: true,
        jsx: ts.JsxEmit.None,
        experimentalDecorators: true,
        emitDecoratorMetadata: true,
        paths: {
            '@test': ['./specific-path-1/test'],
            '@another': ['./specific-path-2/another'],
        },
        jsxFactory: 'jsx-factory',
        jsxFragmentFactory: 'jsx-fragment-factory',
        jsxImportSource: 'jsx-import-source',
        baseUrl: './packages/register/__test__',
    };
    const filename = 'some-file.tsx';
    const swcConfig = (0, read_default_tsconfig_1.tsCompilerOptionsToSwcConfig)(options, filename);
    const expected = {
        module: 'commonjs',
        sourcemap: 'inline',
        experimentalDecorators: options.experimentalDecorators,
        emitDecoratorMetadata: options.emitDecoratorMetadata,
        esModuleInterop: options.esModuleInterop,
        swc: {
            filename,
            inputSourceMap: options.inlineSourceMap,
            sourceRoot: options.sourceRoot,
            jsc: {
                externalHelpers: options.importHelpers,
                parser: {
                    syntax: 'typescript',
                    tsx: true,
                    dynamicImport: true,
                    decorators: options.experimentalDecorators,
                },
                paths: {
                    '@test': [(0, path_1.join)(__dirname, './specific-path-1/test')],
                    '@another': [(0, path_1.join)(__dirname, './specific-path-2/another')],
                },
                keepClassNames: true,
                target: 'es5',
                transform: {
                    decoratorMetadata: options.emitDecoratorMetadata,
                    legacyDecorator: options.experimentalDecorators,
                    react: {
                        pragma: options.jsxFactory,
                        pragmaFrag: options.jsxFragmentFactory,
                        importSource: options.jsxImportSource,
                        runtime: 'classic',
                        useBuiltins: true,
                    },
                },
            },
        },
    };
    t.deepEqual(swcConfig, expected);
});
//# sourceMappingURL=ts-compiler-options-to-swc-config.spec.js.map